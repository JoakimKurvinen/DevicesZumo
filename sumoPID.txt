/**
* @mainpage ZumoBot Project
* @brief    You can make your own ZumoBot with various sensors.
* @details  <br><br>
    <p>
    <B>General</B><br>
    You will use Pololu Zumo Shields for your robot project with CY8CKIT-059(PSoC 5LP) from Cypress semiconductor.This 
    library has basic methods of various sensors and communications so that you can make what you want with them. <br> 
    <br><br>
    </p>
    
    <p>
    <B>Sensors</B><br>
    &nbsp;Included: <br>
        &nbsp;&nbsp;&nbsp;&nbsp;LSM303D: Accelerometer & Magnetometer<br>
        &nbsp;&nbsp;&nbsp;&nbsp;L3GD20H: Gyroscope<br>
        &nbsp;&nbsp;&nbsp;&nbsp;Reflectance sensor<br>
        &nbsp;&nbsp;&nbsp;&nbsp;Motors
    &nbsp;Wii nunchuck<br>
    &nbsp;TSOP-2236: IR Receiver<br>
    &nbsp;HC-SR04: Ultrasonic sensor<br>
    &nbsp;APDS-9301: Ambient light sensor<br>
    &nbsp;IR LED <br><br><br>
    </p>
    
    <p>
    <B>Communication</B><br>
    I2C, UART, Serial<br>
    </p>
*/

#include <project.h>
#include <stdio.h>
#include "Systick.h"
#include "Motor.h"
#include "Ultra.h"
#include "Nunchuk.h"
#include "Reflectance.h"
#include "I2C_made.h"
#include "Gyro.h"
#include "Accel_magnet.h"
#include "IR.h"
#include "Ambient.h"
#include "Beep.h"
#include <time.h>
#include <sys/time.h>
int rread(void);

struct sensors_ ref;
//struct sensors_ dig;



void startSensorsAndSetSensorThresholds();
int calculateProcessVariable();


/**
 * @file    main.c
 * @brief   
 * @details  ** Enable global interrupt since Zumo library uses interrupts. **<br>&nbsp;&nbsp;&nbsp;CyGlobalIntEnable;<br>
*/

#if 1
//battery level//
int main()
{
    CyGlobalIntEnable; 
    UART_1_Start();
    Systick_Start();
    
    ADC_Battery_Start();        

    int16 adcresult =0;
    float volts = 0.0;
    
    
    

    //printf("\nBoot\n");

    //BatteryLed_Write(1); // Switch led on 
   // BatteryLed_Write(0); // Switch led off 
    //uint8 button;
    //button = SW1_Read(); // read SW1 on pSoC board
    // SW1_Read() returns zero when button is pressed
    // SW1_Read() returns one when button is not pressed
    volts = (float) adcresult / 4095 * 5;
            volts = volts*1.5;    
    if(volts < 4){
        Beep(200, 50);
    }

    const float startSpeed = 200;
    motor_start(); 
    startSensorsAndSetSensorThresholds();
    motor_forward(startSpeed, 0);
        
    float errorBefore = 0;
    int previousPV = 0;
    
    //float integral = 0.0;
    //float dt = 0.0;
    
    for(;;)
    {
        
        /*ADC_Battery_StartConvert();
        if(ADC_Battery_IsEndConversion(ADC_Battery_WAIT_FOR_RESULT)) {   // wait for get ADC converted value
            adcresult = ADC_Battery_GetResult16(); // get the ADC value (0 - 4095)
            // convert value to Volts
            // you need to implement the conversion
            
            // Print both ADC results and converted value
            printf("%d %f\r\n",adcresult, volts);
        }
        CyDelay(1);*/
        
        
        //calculate process variable
        int processVariable = calculateProcessVariable();
        if (processVariable == -1) {
            processVariable = previousPV;   //no black line, use value where black line was last seen by sensors
        }else {
            previousPV = processVariable;
        }
        
        int setPoint = 2500;
        int error = setPoint - processVariable; 
        //error range : [-2500, 2500], if error is negative, turn right, if 0, go forward, if positive, turn left
       
        
        
        
        //calculate controller output:
        //the output is the difference in speed between the two motors
        //differenceInMotorSpeed = right motor speed - left motor speed;
        //if error is negative, turn right, which means left motor goes faster than the right one, which means the difference in speed is negative
        //if error is positive, turn left, which means right motor goes faster than the left one, which means difference in speed is positive
        //if error is 0, which means robot goes forward, which means both motors go at same speed
        
        const float Kp = 0.55; // proportional constant, which helps calculate the proportional part, to be defined by trial and error
        float proportionalPart = Kp * error; 
        
        const float Kd = 10; //to be defined by trial and error, define after Kp has been finetuned,
        float derivativePart = (errorBefore - error) * Kd ;
       
        
       // const float Ki = 0.1;
      //  integral = integral + error * dt;
        
       float differenceInMotorSpeed = proportionalPart;// + derivativePart; // + Ki * integral;
         //output = Kp * error + Ki * integral + Kd * derivative
        
        float rightMotorSpeed;
        float leftMotorSpeed;
        
        if(differenceInMotorSpeed == 0){
            rightMotorSpeed = startSpeed;
            leftMotorSpeed = startSpeed;
        }else if(differenceInMotorSpeed > 0){
            rightMotorSpeed = startSpeed;
            leftMotorSpeed = rightMotorSpeed - differenceInMotorSpeed;
        }else if(differenceInMotorSpeed < 0){
            leftMotorSpeed = startSpeed;
            rightMotorSpeed = leftMotorSpeed + differenceInMotorSpeed;
        }
               
        
        //adjust motors' speed to center robot on black line based on error signal
        motor_turn(leftMotorSpeed,rightMotorSpeed,0);
        errorBefore = error;
       
    }
 }


int calculateProcessVariable(){
    reflectance_digital(&ref);
    
    
    int pv = 0;
    
    if(ref.l3 == 1){
        pv = pv + 1000 * 1 * 0;
    }
    
    if(ref.l2 == 1){
        pv = pv + 1000 * 1 * 1;
    }
    
    if(ref.l1 == 1){
        pv = pv + 1000 * 1 * 2;
    }
    
    if(ref.r1 == 1){
         pv = pv + 1000 * 1 * 3;
    }
    
    
    if(ref.r2 == 1){
         pv = pv + 1000 * 1 * 4;
    }
    
    
    if(ref.r3 == 1){
         pv = pv + 1000 * 1 * 5;
    }
    
   /* if( ref.r3 == 1){
    motor_turn(255,0,10);        
    }else if( ref.l3 == 1){
    motor_turn(0,255,10);        
    }*/
    
    int vSum = ref.l1 + ref.l2 + ref.l3 + ref.r1 + ref.r2 + ref.r3;
    
    if (vSum == 0){
        pv = -1; //if vSum = 0, pv not defined, it may crash the system             
    }else if(vSum == 6){
       motor_stop();
    }else{           
        pv = pv/vSum;     
    }   
    return pv;
}

void startSensorsAndSetSensorThresholds(){
    reflectance_start();
    reflectance_set_threshold(20000, 20000, 23000, 23000, 20000, 20000); // set center sensor threshold to 11000 and others to 9000
}


#endif

#if 0
// button
int main()
{
    CyGlobalIntEnable; 
    UART_1_Start();
    Systick_Start();
    
    printf("\nBoot\n");

    //BatteryLed_Write(1); // Switch led on 
    BatteryLed_Write(0); // Switch led off 
    
    //uint8 button;
    //button = SW1_Read(); // read SW1 on pSoC board
    // SW1_Read() returns zero when button is pressed
    // SW1_Read() returns one when button is not pressed
    
    bool led = false;
    
    for(;;)
    {
        // toggle led state when button is pressed
        if(SW1_Read() == 0) {
            led = !led;
            BatteryLed_Write(led);
            ShieldLed_Write(led);
            if(led) printf("Led is ON\n");
            else printf("Led is OFF\n");
            Beep(1000, 150);
            while(SW1_Read() == 0) CyDelay(10); // wait while button is being pressed
        }        
    }
 }   
#endif


#if 0
//ultrasonic sensor//
int main()
{
    CyGlobalIntEnable; 
    UART_1_Start();
    Systick_Start();
    Ultra_Start();                          // Ultra Sonic Start function
    while(1) {
        int d = Ultra_GetDistance();
        //If you want to print out the value  
        printf("distance = %d\r\n", d);
        CyDelay(200);
    }
}   
#endif


#if 0
//IR receiver//
int main()
{
    CyGlobalIntEnable; 
    UART_1_Start();
    IR_Start();
    
    uint32_t IR_val; 
    
    printf("\n\nIR test\n");
    
    IR_flush(); // clear IR receive buffer
    printf("Buffer cleared\n");
    
    IR_wait(); // wait for IR command
    printf("IR command received\n");
    
    // print received IR pulses and their lengths
    for(;;)
    {
        if(IR_get(&IR_val)) {
            int l = IR_val & IR_SIGNAL_MASK; // get pulse length
            int b = 0;
            if((IR_val & IR_SIGNAL_HIGH) != 0) b = 1; // get pulse state (0/1)
            printf("%d %d\r\n",b, l);
            //printf("%d %lu\r\n",IR_val & IR_SIGNAL_HIGH ? 1 : 0, (unsigned long) (IR_val & IR_SIGNAL_MASK));
        }
    }    
 }   
#endif


#if 0
//reflectance//
int main()
{
    struct sensors_ ref;
    struct sensors_ dig;

    Systick_Start();

    CyGlobalIntEnable; 
    UART_1_Start();
  
    reflectance_start();
    reflectance_set_threshold(9000, 9000, 11000, 11000, 9000, 9000); // set center sensor threshold to 11000 and others to 9000
    

    for(;;)
    {
        // read raw sensor values
        reflectance_read(&ref);
        printf("%5d %5d %5d %5d %5d %5d\r\n", ref.l3, ref.l2, ref.l1, ref.r1, ref.r2, ref.r3);       // print out each period of reflectance sensors
        
        // read digital values that are based on threshold. 0 = white, 1 = black
        // when blackness value is over threshold the sensors reads 1, otherwise 0
        reflectance_digital(&dig);      //print out 0 or 1 according to results of reflectance period
        printf("%5d %5d %5d %5d %5d %5d \r\n", dig.l3, dig.l2, dig.l1, dig.r1, dig.r2, dig.r3);        //print out 0 or 1 according to results of reflectance period
        
        CyDelay(200);
    }
}   
#endif


#if 0
//motor//
int main()
{
    CyGlobalIntEnable; 
    UART_1_Start();

    motor_start();              // motor start

    motor_forward(100,2000);     // moving forward
    motor_turn(200,50,2000);     // turn
    motor_turn(50,200,2000);     // turn
    motor_backward(100,2000);    // movinb backward
       
    motor_stop();               // motor stop
    
    for(;;)
    {

    }
}
#endif


/* [] END OF FILE */
